/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.1
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the Employment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Employment{}

// Employment struct for Employment
type Employment struct {
	Current *bool `json:"current,omitempty"`
	Company *string `json:"company,omitempty"`
	Title *string `json:"title,omitempty"`
	Domain *string `json:"domain,omitempty"`
	Start *EmploymentDate `json:"start,omitempty"`
	End *EmploymentDate `json:"end,omitempty"`
}

// NewEmployment instantiates a new Employment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployment() *Employment {
	this := Employment{}
	return &this
}

// NewEmploymentWithDefaults instantiates a new Employment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmploymentWithDefaults() *Employment {
	this := Employment{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *Employment) GetCurrent() bool {
	if o == nil || IsNil(o.Current) {
		var ret bool
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetCurrentOk() (*bool, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *Employment) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given bool and assigns it to the Current field.
func (o *Employment) SetCurrent(v bool) {
	o.Current = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *Employment) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *Employment) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *Employment) SetCompany(v string) {
	o.Company = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Employment) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Employment) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Employment) SetTitle(v string) {
	o.Title = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Employment) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Employment) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Employment) SetDomain(v string) {
	o.Domain = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Employment) GetStart() EmploymentDate {
	if o == nil || IsNil(o.Start) {
		var ret EmploymentDate
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetStartOk() (*EmploymentDate, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Employment) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given EmploymentDate and assigns it to the Start field.
func (o *Employment) SetStart(v EmploymentDate) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Employment) GetEnd() EmploymentDate {
	if o == nil || IsNil(o.End) {
		var ret EmploymentDate
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetEndOk() (*EmploymentDate, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Employment) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given EmploymentDate and assigns it to the End field.
func (o *Employment) SetEnd(v EmploymentDate) {
	o.End = &v
}

func (o Employment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Employment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableEmployment struct {
	value *Employment
	isSet bool
}

func (v NullableEmployment) Get() *Employment {
	return v.value
}

func (v *NullableEmployment) Set(val *Employment) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployment) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployment(val *Employment) *NullableEmployment {
	return &NullableEmployment{value: val, isSet: true}
}

func (v NullableEmployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


