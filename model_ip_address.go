/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.4
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the IpAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpAddress{}

// IpAddress struct for IpAddress
type IpAddress struct {
	FirstSeenMs *int64 `json:"firstSeenMs,omitempty"`
	LastSeenMs *int64 `json:"lastSeenMs,omitempty"`
	Observations *int32 `json:"observations,omitempty"`
	Confidence *float64 `json:"confidence,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewIpAddress instantiates a new IpAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddress() *IpAddress {
	this := IpAddress{}
	return &this
}

// NewIpAddressWithDefaults instantiates a new IpAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressWithDefaults() *IpAddress {
	this := IpAddress{}
	return &this
}

// GetFirstSeenMs returns the FirstSeenMs field value if set, zero value otherwise.
func (o *IpAddress) GetFirstSeenMs() int64 {
	if o == nil || IsNil(o.FirstSeenMs) {
		var ret int64
		return ret
	}
	return *o.FirstSeenMs
}

// GetFirstSeenMsOk returns a tuple with the FirstSeenMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddress) GetFirstSeenMsOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstSeenMs) {
		return nil, false
	}
	return o.FirstSeenMs, true
}

// HasFirstSeenMs returns a boolean if a field has been set.
func (o *IpAddress) HasFirstSeenMs() bool {
	if o != nil && !IsNil(o.FirstSeenMs) {
		return true
	}

	return false
}

// SetFirstSeenMs gets a reference to the given int64 and assigns it to the FirstSeenMs field.
func (o *IpAddress) SetFirstSeenMs(v int64) {
	o.FirstSeenMs = &v
}

// GetLastSeenMs returns the LastSeenMs field value if set, zero value otherwise.
func (o *IpAddress) GetLastSeenMs() int64 {
	if o == nil || IsNil(o.LastSeenMs) {
		var ret int64
		return ret
	}
	return *o.LastSeenMs
}

// GetLastSeenMsOk returns a tuple with the LastSeenMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddress) GetLastSeenMsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSeenMs) {
		return nil, false
	}
	return o.LastSeenMs, true
}

// HasLastSeenMs returns a boolean if a field has been set.
func (o *IpAddress) HasLastSeenMs() bool {
	if o != nil && !IsNil(o.LastSeenMs) {
		return true
	}

	return false
}

// SetLastSeenMs gets a reference to the given int64 and assigns it to the LastSeenMs field.
func (o *IpAddress) SetLastSeenMs(v int64) {
	o.LastSeenMs = &v
}

// GetObservations returns the Observations field value if set, zero value otherwise.
func (o *IpAddress) GetObservations() int32 {
	if o == nil || IsNil(o.Observations) {
		var ret int32
		return ret
	}
	return *o.Observations
}

// GetObservationsOk returns a tuple with the Observations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddress) GetObservationsOk() (*int32, bool) {
	if o == nil || IsNil(o.Observations) {
		return nil, false
	}
	return o.Observations, true
}

// HasObservations returns a boolean if a field has been set.
func (o *IpAddress) HasObservations() bool {
	if o != nil && !IsNil(o.Observations) {
		return true
	}

	return false
}

// SetObservations gets a reference to the given int32 and assigns it to the Observations field.
func (o *IpAddress) SetObservations(v int32) {
	o.Observations = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *IpAddress) GetConfidence() float64 {
	if o == nil || IsNil(o.Confidence) {
		var ret float64
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddress) GetConfidenceOk() (*float64, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *IpAddress) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float64 and assigns it to the Confidence field.
func (o *IpAddress) SetConfidence(v float64) {
	o.Confidence = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpAddress) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddress) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpAddress) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpAddress) SetId(v string) {
	o.Id = &v
}

func (o IpAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstSeenMs) {
		toSerialize["firstSeenMs"] = o.FirstSeenMs
	}
	if !IsNil(o.LastSeenMs) {
		toSerialize["lastSeenMs"] = o.LastSeenMs
	}
	if !IsNil(o.Observations) {
		toSerialize["observations"] = o.Observations
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableIpAddress struct {
	value *IpAddress
	isSet bool
}

func (v NullableIpAddress) Get() *IpAddress {
	return v.value
}

func (v *NullableIpAddress) Set(val *IpAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddress(val *IpAddress) *NullableIpAddress {
	return &NullableIpAddress{value: val, isSet: true}
}

func (v NullableIpAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


