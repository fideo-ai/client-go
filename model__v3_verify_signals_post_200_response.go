/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.4
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// V3VerifySignalsPost200Response - struct for V3VerifySignalsPost200Response
type V3VerifySignalsPost200Response struct {
	SignalsResponseV0 *SignalsResponseV0
	SignalsResponseV20240424 *SignalsResponseV20240424
}

// SignalsResponseV0AsV3VerifySignalsPost200Response is a convenience function that returns SignalsResponseV0 wrapped in V3VerifySignalsPost200Response
func SignalsResponseV0AsV3VerifySignalsPost200Response(v *SignalsResponseV0) V3VerifySignalsPost200Response {
	return V3VerifySignalsPost200Response{
		SignalsResponseV0: v,
	}
}

// SignalsResponseV20240424AsV3VerifySignalsPost200Response is a convenience function that returns SignalsResponseV20240424 wrapped in V3VerifySignalsPost200Response
func SignalsResponseV20240424AsV3VerifySignalsPost200Response(v *SignalsResponseV20240424) V3VerifySignalsPost200Response {
	return V3VerifySignalsPost200Response{
		SignalsResponseV20240424: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V3VerifySignalsPost200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SignalsResponseV0
	err = newStrictDecoder(data).Decode(&dst.SignalsResponseV0)
	if err == nil {
		jsonSignalsResponseV0, _ := json.Marshal(dst.SignalsResponseV0)
		if string(jsonSignalsResponseV0) == "{}" { // empty struct
			dst.SignalsResponseV0 = nil
		} else {
			if err = validator.Validate(dst.SignalsResponseV0); err != nil {
				dst.SignalsResponseV0 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SignalsResponseV0 = nil
	}

	// try to unmarshal data into SignalsResponseV20240424
	err = newStrictDecoder(data).Decode(&dst.SignalsResponseV20240424)
	if err == nil {
		jsonSignalsResponseV20240424, _ := json.Marshal(dst.SignalsResponseV20240424)
		if string(jsonSignalsResponseV20240424) == "{}" { // empty struct
			dst.SignalsResponseV20240424 = nil
		} else {
			if err = validator.Validate(dst.SignalsResponseV20240424); err != nil {
				dst.SignalsResponseV20240424 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SignalsResponseV20240424 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SignalsResponseV0 = nil
		dst.SignalsResponseV20240424 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V3VerifySignalsPost200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V3VerifySignalsPost200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V3VerifySignalsPost200Response) MarshalJSON() ([]byte, error) {
	if src.SignalsResponseV0 != nil {
		return json.Marshal(&src.SignalsResponseV0)
	}

	if src.SignalsResponseV20240424 != nil {
		return json.Marshal(&src.SignalsResponseV20240424)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V3VerifySignalsPost200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SignalsResponseV0 != nil {
		return obj.SignalsResponseV0
	}

	if obj.SignalsResponseV20240424 != nil {
		return obj.SignalsResponseV20240424
	}

	// all schemas are nil
	return nil
}

type NullableV3VerifySignalsPost200Response struct {
	value *V3VerifySignalsPost200Response
	isSet bool
}

func (v NullableV3VerifySignalsPost200Response) Get() *V3VerifySignalsPost200Response {
	return v.value
}

func (v *NullableV3VerifySignalsPost200Response) Set(val *V3VerifySignalsPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV3VerifySignalsPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV3VerifySignalsPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3VerifySignalsPost200Response(val *V3VerifySignalsPost200Response) *NullableV3VerifySignalsPost200Response {
	return &NullableV3VerifySignalsPost200Response{value: val, isSet: true}
}

func (v NullableV3VerifySignalsPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3VerifySignalsPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


