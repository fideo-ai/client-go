/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.1
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the PersonNameReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonNameReq{}

// PersonNameReq struct for PersonNameReq
type PersonNameReq struct {
	Given *string `json:"given,omitempty"`
	Family *string `json:"family,omitempty"`
	Middle *string `json:"middle,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	Suffix *string `json:"suffix,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
	Full *string `json:"full,omitempty"`
}

// NewPersonNameReq instantiates a new PersonNameReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonNameReq() *PersonNameReq {
	this := PersonNameReq{}
	return &this
}

// NewPersonNameReqWithDefaults instantiates a new PersonNameReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonNameReqWithDefaults() *PersonNameReq {
	this := PersonNameReq{}
	return &this
}

// GetGiven returns the Given field value if set, zero value otherwise.
func (o *PersonNameReq) GetGiven() string {
	if o == nil || IsNil(o.Given) {
		var ret string
		return ret
	}
	return *o.Given
}

// GetGivenOk returns a tuple with the Given field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetGivenOk() (*string, bool) {
	if o == nil || IsNil(o.Given) {
		return nil, false
	}
	return o.Given, true
}

// HasGiven returns a boolean if a field has been set.
func (o *PersonNameReq) HasGiven() bool {
	if o != nil && !IsNil(o.Given) {
		return true
	}

	return false
}

// SetGiven gets a reference to the given string and assigns it to the Given field.
func (o *PersonNameReq) SetGiven(v string) {
	o.Given = &v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *PersonNameReq) GetFamily() string {
	if o == nil || IsNil(o.Family) {
		var ret string
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.Family) {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *PersonNameReq) HasFamily() bool {
	if o != nil && !IsNil(o.Family) {
		return true
	}

	return false
}

// SetFamily gets a reference to the given string and assigns it to the Family field.
func (o *PersonNameReq) SetFamily(v string) {
	o.Family = &v
}

// GetMiddle returns the Middle field value if set, zero value otherwise.
func (o *PersonNameReq) GetMiddle() string {
	if o == nil || IsNil(o.Middle) {
		var ret string
		return ret
	}
	return *o.Middle
}

// GetMiddleOk returns a tuple with the Middle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetMiddleOk() (*string, bool) {
	if o == nil || IsNil(o.Middle) {
		return nil, false
	}
	return o.Middle, true
}

// HasMiddle returns a boolean if a field has been set.
func (o *PersonNameReq) HasMiddle() bool {
	if o != nil && !IsNil(o.Middle) {
		return true
	}

	return false
}

// SetMiddle gets a reference to the given string and assigns it to the Middle field.
func (o *PersonNameReq) SetMiddle(v string) {
	o.Middle = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *PersonNameReq) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *PersonNameReq) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *PersonNameReq) SetPrefix(v string) {
	o.Prefix = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *PersonNameReq) GetSuffix() string {
	if o == nil || IsNil(o.Suffix) {
		var ret string
		return ret
	}
	return *o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.Suffix) {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *PersonNameReq) HasSuffix() bool {
	if o != nil && !IsNil(o.Suffix) {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given string and assigns it to the Suffix field.
func (o *PersonNameReq) SetSuffix(v string) {
	o.Suffix = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *PersonNameReq) GetNickname() string {
	if o == nil || IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *PersonNameReq) HasNickname() bool {
	if o != nil && !IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *PersonNameReq) SetNickname(v string) {
	o.Nickname = &v
}

// GetFull returns the Full field value if set, zero value otherwise.
func (o *PersonNameReq) GetFull() string {
	if o == nil || IsNil(o.Full) {
		var ret string
		return ret
	}
	return *o.Full
}

// GetFullOk returns a tuple with the Full field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonNameReq) GetFullOk() (*string, bool) {
	if o == nil || IsNil(o.Full) {
		return nil, false
	}
	return o.Full, true
}

// HasFull returns a boolean if a field has been set.
func (o *PersonNameReq) HasFull() bool {
	if o != nil && !IsNil(o.Full) {
		return true
	}

	return false
}

// SetFull gets a reference to the given string and assigns it to the Full field.
func (o *PersonNameReq) SetFull(v string) {
	o.Full = &v
}

func (o PersonNameReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonNameReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Given) {
		toSerialize["given"] = o.Given
	}
	if !IsNil(o.Family) {
		toSerialize["family"] = o.Family
	}
	if !IsNil(o.Middle) {
		toSerialize["middle"] = o.Middle
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Suffix) {
		toSerialize["suffix"] = o.Suffix
	}
	if !IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !IsNil(o.Full) {
		toSerialize["full"] = o.Full
	}
	return toSerialize, nil
}

type NullablePersonNameReq struct {
	value *PersonNameReq
	isSet bool
}

func (v NullablePersonNameReq) Get() *PersonNameReq {
	return v.value
}

func (v *NullablePersonNameReq) Set(val *PersonNameReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonNameReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonNameReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonNameReq(val *PersonNameReq) *NullablePersonNameReq {
	return &NullablePersonNameReq{value: val, isSet: true}
}

func (v NullablePersonNameReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonNameReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


