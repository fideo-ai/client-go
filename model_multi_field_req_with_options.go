/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.4
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the MultiFieldReqWithOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiFieldReqWithOptions{}

// MultiFieldReqWithOptions struct for MultiFieldReqWithOptions
type MultiFieldReqWithOptions struct {
	MultiFieldReq
	Infer *bool `json:"infer,omitempty"`
	Confidence *string `json:"confidence,omitempty"`
	Birthday *string `json:"birthday,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	Countries []string `json:"countries,omitempty"`
	ExcludedCountries []string `json:"excludedCountries,omitempty"`
}

// NewMultiFieldReqWithOptions instantiates a new MultiFieldReqWithOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiFieldReqWithOptions() *MultiFieldReqWithOptions {
	this := MultiFieldReqWithOptions{}
	var confidence string = "LOW"
	this.Confidence = &confidence
	return &this
}

// NewMultiFieldReqWithOptionsWithDefaults instantiates a new MultiFieldReqWithOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiFieldReqWithOptionsWithDefaults() *MultiFieldReqWithOptions {
	this := MultiFieldReqWithOptions{}
	var confidence string = "LOW"
	this.Confidence = &confidence
	return &this
}

// GetInfer returns the Infer field value if set, zero value otherwise.
func (o *MultiFieldReqWithOptions) GetInfer() bool {
	if o == nil || IsNil(o.Infer) {
		var ret bool
		return ret
	}
	return *o.Infer
}

// GetInferOk returns a tuple with the Infer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiFieldReqWithOptions) GetInferOk() (*bool, bool) {
	if o == nil || IsNil(o.Infer) {
		return nil, false
	}
	return o.Infer, true
}

// HasInfer returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasInfer() bool {
	if o != nil && !IsNil(o.Infer) {
		return true
	}

	return false
}

// SetInfer gets a reference to the given bool and assigns it to the Infer field.
func (o *MultiFieldReqWithOptions) SetInfer(v bool) {
	o.Infer = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *MultiFieldReqWithOptions) GetConfidence() string {
	if o == nil || IsNil(o.Confidence) {
		var ret string
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiFieldReqWithOptions) GetConfidenceOk() (*string, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given string and assigns it to the Confidence field.
func (o *MultiFieldReqWithOptions) SetConfidence(v string) {
	o.Confidence = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *MultiFieldReqWithOptions) GetBirthday() string {
	if o == nil || IsNil(o.Birthday) {
		var ret string
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiFieldReqWithOptions) GetBirthdayOk() (*string, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given string and assigns it to the Birthday field.
func (o *MultiFieldReqWithOptions) SetBirthday(v string) {
	o.Birthday = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *MultiFieldReqWithOptions) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiFieldReqWithOptions) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *MultiFieldReqWithOptions) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiFieldReqWithOptions) GetCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiFieldReqWithOptions) GetCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *MultiFieldReqWithOptions) SetCountries(v []string) {
	o.Countries = v
}

// GetExcludedCountries returns the ExcludedCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiFieldReqWithOptions) GetExcludedCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedCountries
}

// GetExcludedCountriesOk returns a tuple with the ExcludedCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiFieldReqWithOptions) GetExcludedCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedCountries) {
		return nil, false
	}
	return o.ExcludedCountries, true
}

// HasExcludedCountries returns a boolean if a field has been set.
func (o *MultiFieldReqWithOptions) HasExcludedCountries() bool {
	if o != nil && !IsNil(o.ExcludedCountries) {
		return true
	}

	return false
}

// SetExcludedCountries gets a reference to the given []string and assigns it to the ExcludedCountries field.
func (o *MultiFieldReqWithOptions) SetExcludedCountries(v []string) {
	o.ExcludedCountries = v
}

func (o MultiFieldReqWithOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiFieldReqWithOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMultiFieldReq, errMultiFieldReq := json.Marshal(o.MultiFieldReq)
	if errMultiFieldReq != nil {
		return map[string]interface{}{}, errMultiFieldReq
	}
	errMultiFieldReq = json.Unmarshal([]byte(serializedMultiFieldReq), &toSerialize)
	if errMultiFieldReq != nil {
		return map[string]interface{}{}, errMultiFieldReq
	}
	if !IsNil(o.Infer) {
		toSerialize["infer"] = o.Infer
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.ExcludedCountries != nil {
		toSerialize["excludedCountries"] = o.ExcludedCountries
	}
	return toSerialize, nil
}

type NullableMultiFieldReqWithOptions struct {
	value *MultiFieldReqWithOptions
	isSet bool
}

func (v NullableMultiFieldReqWithOptions) Get() *MultiFieldReqWithOptions {
	return v.value
}

func (v *NullableMultiFieldReqWithOptions) Set(val *MultiFieldReqWithOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiFieldReqWithOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiFieldReqWithOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiFieldReqWithOptions(val *MultiFieldReqWithOptions) *NullableMultiFieldReqWithOptions {
	return &NullableMultiFieldReqWithOptions{value: val, isSet: true}
}

func (v NullableMultiFieldReqWithOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiFieldReqWithOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


