/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.4
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the Economic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Economic{}

// Economic struct for Economic
type Economic struct {
	DwellingType *string `json:"dwellingType,omitempty"`
	HomeOwnership *string `json:"homeOwnership,omitempty"`
	MaritalStatus *string `json:"maritalStatus,omitempty"`
	PresenceOfChildren *string `json:"presenceOfChildren,omitempty"`
	Income *string `json:"income,omitempty"`
	NetWorth *string `json:"netWorth,omitempty"`
}

// NewEconomic instantiates a new Economic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEconomic() *Economic {
	this := Economic{}
	return &this
}

// NewEconomicWithDefaults instantiates a new Economic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEconomicWithDefaults() *Economic {
	this := Economic{}
	return &this
}

// GetDwellingType returns the DwellingType field value if set, zero value otherwise.
func (o *Economic) GetDwellingType() string {
	if o == nil || IsNil(o.DwellingType) {
		var ret string
		return ret
	}
	return *o.DwellingType
}

// GetDwellingTypeOk returns a tuple with the DwellingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetDwellingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DwellingType) {
		return nil, false
	}
	return o.DwellingType, true
}

// HasDwellingType returns a boolean if a field has been set.
func (o *Economic) HasDwellingType() bool {
	if o != nil && !IsNil(o.DwellingType) {
		return true
	}

	return false
}

// SetDwellingType gets a reference to the given string and assigns it to the DwellingType field.
func (o *Economic) SetDwellingType(v string) {
	o.DwellingType = &v
}

// GetHomeOwnership returns the HomeOwnership field value if set, zero value otherwise.
func (o *Economic) GetHomeOwnership() string {
	if o == nil || IsNil(o.HomeOwnership) {
		var ret string
		return ret
	}
	return *o.HomeOwnership
}

// GetHomeOwnershipOk returns a tuple with the HomeOwnership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetHomeOwnershipOk() (*string, bool) {
	if o == nil || IsNil(o.HomeOwnership) {
		return nil, false
	}
	return o.HomeOwnership, true
}

// HasHomeOwnership returns a boolean if a field has been set.
func (o *Economic) HasHomeOwnership() bool {
	if o != nil && !IsNil(o.HomeOwnership) {
		return true
	}

	return false
}

// SetHomeOwnership gets a reference to the given string and assigns it to the HomeOwnership field.
func (o *Economic) SetHomeOwnership(v string) {
	o.HomeOwnership = &v
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise.
func (o *Economic) GetMaritalStatus() string {
	if o == nil || IsNil(o.MaritalStatus) {
		var ret string
		return ret
	}
	return *o.MaritalStatus
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetMaritalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MaritalStatus) {
		return nil, false
	}
	return o.MaritalStatus, true
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *Economic) HasMaritalStatus() bool {
	if o != nil && !IsNil(o.MaritalStatus) {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given string and assigns it to the MaritalStatus field.
func (o *Economic) SetMaritalStatus(v string) {
	o.MaritalStatus = &v
}

// GetPresenceOfChildren returns the PresenceOfChildren field value if set, zero value otherwise.
func (o *Economic) GetPresenceOfChildren() string {
	if o == nil || IsNil(o.PresenceOfChildren) {
		var ret string
		return ret
	}
	return *o.PresenceOfChildren
}

// GetPresenceOfChildrenOk returns a tuple with the PresenceOfChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetPresenceOfChildrenOk() (*string, bool) {
	if o == nil || IsNil(o.PresenceOfChildren) {
		return nil, false
	}
	return o.PresenceOfChildren, true
}

// HasPresenceOfChildren returns a boolean if a field has been set.
func (o *Economic) HasPresenceOfChildren() bool {
	if o != nil && !IsNil(o.PresenceOfChildren) {
		return true
	}

	return false
}

// SetPresenceOfChildren gets a reference to the given string and assigns it to the PresenceOfChildren field.
func (o *Economic) SetPresenceOfChildren(v string) {
	o.PresenceOfChildren = &v
}

// GetIncome returns the Income field value if set, zero value otherwise.
func (o *Economic) GetIncome() string {
	if o == nil || IsNil(o.Income) {
		var ret string
		return ret
	}
	return *o.Income
}

// GetIncomeOk returns a tuple with the Income field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetIncomeOk() (*string, bool) {
	if o == nil || IsNil(o.Income) {
		return nil, false
	}
	return o.Income, true
}

// HasIncome returns a boolean if a field has been set.
func (o *Economic) HasIncome() bool {
	if o != nil && !IsNil(o.Income) {
		return true
	}

	return false
}

// SetIncome gets a reference to the given string and assigns it to the Income field.
func (o *Economic) SetIncome(v string) {
	o.Income = &v
}

// GetNetWorth returns the NetWorth field value if set, zero value otherwise.
func (o *Economic) GetNetWorth() string {
	if o == nil || IsNil(o.NetWorth) {
		var ret string
		return ret
	}
	return *o.NetWorth
}

// GetNetWorthOk returns a tuple with the NetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Economic) GetNetWorthOk() (*string, bool) {
	if o == nil || IsNil(o.NetWorth) {
		return nil, false
	}
	return o.NetWorth, true
}

// HasNetWorth returns a boolean if a field has been set.
func (o *Economic) HasNetWorth() bool {
	if o != nil && !IsNil(o.NetWorth) {
		return true
	}

	return false
}

// SetNetWorth gets a reference to the given string and assigns it to the NetWorth field.
func (o *Economic) SetNetWorth(v string) {
	o.NetWorth = &v
}

func (o Economic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Economic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DwellingType) {
		toSerialize["dwellingType"] = o.DwellingType
	}
	if !IsNil(o.HomeOwnership) {
		toSerialize["homeOwnership"] = o.HomeOwnership
	}
	if !IsNil(o.MaritalStatus) {
		toSerialize["maritalStatus"] = o.MaritalStatus
	}
	if !IsNil(o.PresenceOfChildren) {
		toSerialize["presenceOfChildren"] = o.PresenceOfChildren
	}
	if !IsNil(o.Income) {
		toSerialize["income"] = o.Income
	}
	if !IsNil(o.NetWorth) {
		toSerialize["netWorth"] = o.NetWorth
	}
	return toSerialize, nil
}

type NullableEconomic struct {
	value *Economic
	isSet bool
}

func (v NullableEconomic) Get() *Economic {
	return v.value
}

func (v *NullableEconomic) Set(val *Economic) {
	v.value = val
	v.isSet = true
}

func (v NullableEconomic) IsSet() bool {
	return v.isSet
}

func (v *NullableEconomic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEconomic(val *Economic) *NullableEconomic {
	return &NullableEconomic{value: val, isSet: true}
}

func (v NullableEconomic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEconomic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


