/*
Fideo API

Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

API version: 1.0.1
Contact: support@fideo.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fideo

import (
	"encoding/json"
)

// checks if the ScoreDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoreDetails{}

// ScoreDetails struct for ScoreDetails
type ScoreDetails struct {
	Scorer *string `json:"scorer,omitempty"`
	Score *float64 `json:"score,omitempty"`
	Evidence map[string]map[string]interface{} `json:"evidence,omitempty"`
	Weight *float64 `json:"weight,omitempty"`
}

// NewScoreDetails instantiates a new ScoreDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoreDetails() *ScoreDetails {
	this := ScoreDetails{}
	return &this
}

// NewScoreDetailsWithDefaults instantiates a new ScoreDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreDetailsWithDefaults() *ScoreDetails {
	this := ScoreDetails{}
	return &this
}

// GetScorer returns the Scorer field value if set, zero value otherwise.
func (o *ScoreDetails) GetScorer() string {
	if o == nil || IsNil(o.Scorer) {
		var ret string
		return ret
	}
	return *o.Scorer
}

// GetScorerOk returns a tuple with the Scorer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoreDetails) GetScorerOk() (*string, bool) {
	if o == nil || IsNil(o.Scorer) {
		return nil, false
	}
	return o.Scorer, true
}

// HasScorer returns a boolean if a field has been set.
func (o *ScoreDetails) HasScorer() bool {
	if o != nil && !IsNil(o.Scorer) {
		return true
	}

	return false
}

// SetScorer gets a reference to the given string and assigns it to the Scorer field.
func (o *ScoreDetails) SetScorer(v string) {
	o.Scorer = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ScoreDetails) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoreDetails) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ScoreDetails) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *ScoreDetails) SetScore(v float64) {
	o.Score = &v
}

// GetEvidence returns the Evidence field value if set, zero value otherwise.
func (o *ScoreDetails) GetEvidence() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Evidence) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoreDetails) GetEvidenceOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Evidence) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Evidence, true
}

// HasEvidence returns a boolean if a field has been set.
func (o *ScoreDetails) HasEvidence() bool {
	if o != nil && !IsNil(o.Evidence) {
		return true
	}

	return false
}

// SetEvidence gets a reference to the given map[string]map[string]interface{} and assigns it to the Evidence field.
func (o *ScoreDetails) SetEvidence(v map[string]map[string]interface{}) {
	o.Evidence = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ScoreDetails) GetWeight() float64 {
	if o == nil || IsNil(o.Weight) {
		var ret float64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoreDetails) GetWeightOk() (*float64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ScoreDetails) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float64 and assigns it to the Weight field.
func (o *ScoreDetails) SetWeight(v float64) {
	o.Weight = &v
}

func (o ScoreDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoreDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scorer) {
		toSerialize["scorer"] = o.Scorer
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Evidence) {
		toSerialize["evidence"] = o.Evidence
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullableScoreDetails struct {
	value *ScoreDetails
	isSet bool
}

func (v NullableScoreDetails) Get() *ScoreDetails {
	return v.value
}

func (v *NullableScoreDetails) Set(val *ScoreDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableScoreDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableScoreDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoreDetails(val *ScoreDetails) *NullableScoreDetails {
	return &NullableScoreDetails{value: val, isSet: true}
}

func (v NullableScoreDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoreDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


